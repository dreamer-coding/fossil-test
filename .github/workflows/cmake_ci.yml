name: CMake CI

on:
  push:
    paths:
      - "**.c"
      - "**.h"
      - "**.cpp"
      - "**.hpp"
      - "**.rs"
      - "**.py"
      - "**.build"
      - "**.options"
  pull_request:
    paths:
      - "**.c"
      - "**.h"
      - "**.cpp"
      - "**.hpp"
      - "**.rs"
      - "**.py"
      - "**.build"
      - "**.options"

jobs:
  build_msvc:
    name: Building on MSVC ${{ matrix.msvc_version }}
    runs-on: windows-latest
    strategy:
      matrix:
        msvc_version: [2015, 2017, 2019, 2022]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install CMake and Ninja
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install cmake ninja
          if ($env:msvc_version -eq "2015") {
            choco install visualstudio2015buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --includeRecommended --includeOptional --passive"
          } elseif ($env:msvc_version -eq "2017") {
            choco install visualstudio2017buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive"
          } elseif ($env:msvc_version -eq "2019") {
            choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive"
          } elseif ($env:msvc_version -eq "2022") {
            choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive"
          }
          $env:CC="cl.exe"
          $env:CXX="cl.exe"

      - name: Configure CMake
        run: cmake -S . -B build_msvc_${{ matrix.msvc_version }} -G "Ninja" -DWITH_TESTS=OFF

      - name: Build
        run: cmake --build build_msvc_${{ matrix.msvc_version }} --config Release

      - name: Upload Build Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: windows_msvc_${{ matrix.msvc_version }}_cmake_buildlog
          path: build_msvc_${{ matrix.msvc_version }}/build.ninja

  build_macosx:
    name: Building on macOS with Xcode ${{ matrix.xcode_version }}
    runs-on: macos-latest
    strategy:
      matrix:
        xcode_version: ["15.2", "15.3"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
  
      - name: Install Xcode
        run: sudo xcode-select --switch /Applications/Xcode_${{ matrix.xcode_version }}.app
  
      - name: Install CMake and Ninja
        run: |
          python -m pip install cmake ninja
  
      - name: Configure CMake
        run: cmake -S . -B builddir -G "Ninja" -DWITH_TESTS=OFF
  
      - name: Build
        run: cmake --build builddir --config Release
  
      - name: Upload Build Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: macos_xcode_${{ matrix.xcode_version }}_cmake_buildlog
          path: builddir/build.ninja

  build_msys:
    name: Building on MSYS ${{ matrix.architecture }}
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x86, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true

      - name: Set environment variables
        run: |
          echo "CC=/mingw${{ matrix.architecture }}/bin/gcc.exe" >> $GITHUB_ENV
          echo "CXX=/mingw${{ matrix.architecture }}/bin/g++.exe" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install CMake and Ninja
        run: |
          python -m pip install cmake ninja

      - name: Configure CMake
        run: cmake -S . -B builddir -G "Ninja" -DWITH_TESTS=OFF

      - name: Build
        run: cmake --build builddir --config Release

      - name: Upload Build Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: msys_${{ matrix.architecture }}_cmake_buildlog
          path: builddir/build.ninja

  build_posix:
    name: Build on Linux ${{ matrix.distro }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        distro: [ubuntu, fedora, archlinux, debian]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.distro }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Build Docker Image
        run: |
          docker build \
            --file .github/ciimage/Dockerfile.${{ matrix.distro }} \
            --tag ${GITHUB_REPOSITORY}:${{ matrix.distro }} .

      - name: Run CMake Build in Docker Container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ${GITHUB_REPOSITORY}:${{ matrix.distro }} \
            /bin/bash -c "
              apt-get update
              cmake -S . -B builddir -G Ninja -DWITH_TESTS=OFF
              cmake --build builddir --config Release"
